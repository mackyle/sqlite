# 2014 August 30
#
# The author disclaims copyright to this source code.  In place of
# a legal notice, here is a blessing:
#
#    May you do good and not evil.
#    May you find forgiveness for yourself and forgive others.
#    May you share freely, never taking more than you give.
#
#***********************************************************************
#

source [file join [file dirname [info script]] rbu_common.tcl]
set ::testprefix rbu1

forcedelete test.db2
do_execsql_test 1.0 {
  CREATE TABLE t1(a INTEGER, b, c, PRIMARY KEY(a));
  CREATE INDEX t1b ON t1(b);         -- root=3
  CREATE INDEX t1c ON t1(c);         -- root=4

  ATTACH 'test.db2' AS 'rbu';
  CREATE TABLE rbu.data_t1(a, b, c, rbu_control);
  INSERT INTO data_t1 VALUES(1, 1, 1, 0);
  INSERT INTO data_t1 VALUES(2, 2, 2, 0);
  INSERT INTO data_t1 VALUES(3, 3, 3, 0);
}

do_test 1.1 {
  sqlite3_test_control SQLITE_TESTCTRL_IMPOSTER db main 1 3
  execsql {
    CREATE TABLE imp1(b, id, PRIMARY KEY(b, id)) WITHOUT ROWID;
    INSERT INTO imp1 VALUES(2, 2);
  }
  sqlite3_test_control SQLITE_TESTCTRL_IMPOSTER db main 0 3
} {}

db close
sqlite3 db test.db

do_test 1.2 {
  sqlite3_test_control SQLITE_TESTCTRL_IMPOSTER db main 1 4
  execsql {
    CREATE TABLE imp1(b, id, PRIMARY KEY(b, id)) WITHOUT ROWID;
    INSERT INTO imp1 VALUES(3, 3);
  }
  sqlite3_test_control SQLITE_TESTCTRL_IMPOSTER db main 0 4
} {}
db close
db_save

sqlite3 db test.db
do_catchsql_test 1.3 { PRAGMA integrity_check } {0 {{wrong # of entries in index t1c} {wrong # of entries in index t1b}}}
db close

do_test 1.4 {
  sqlite3rbu rbu test.db test.db2
  while 1 {
    set rc [rbu step]
    if {$rc!="SQLITE_OK"} break
  }
  list [catch { rbu close } msg] $msg
} {1 {SQLITE_CONSTRAINT - UNIQUE constraint failed: t1.b, t1.a}}

db_restore
sqlite3 db test.db2
do_execsql_test 1.5 {
  PRAGMA writable_schema = 1;
  CREATE TABLE sqlite_rbu_replace_hack('v');
}
db close

do_test 1.6 {
  sqlite3rbu rbu test.db test.db2
  while 1 {
    set rc [rbu step]
    if {$rc!="SQLITE_OK"} break
  }
  list [catch { rbu close } msg] $msg
} {0 SQLITE_DONE}

sqlite3 db test.db
do_execsql_test 1.7 {
  PRAGMA integrity_check;
  SELECT count(*) FROM t1;
} {ok 3}

#-------------------------------------------------------------------------

reset_db
forcedelete test.db2
do_execsql_test 2.0 {
  CREATE TABLE t1(a, b, c, PRIMARY KEY(a, b));
  CREATE INDEX t1c ON t1(c);         -- root=4

  ATTACH 'test.db2' AS 'rbu';
  CREATE TABLE rbu.data_t1(a, b, c, rbu_control);
  INSERT INTO data_t1 VALUES(1, 1, 1, 0);
  INSERT INTO data_t1 VALUES(2, 2, 2, 0);
  INSERT INTO data_t1 VALUES(3, 3, 3, 0);
}

do_test 2.1 {
  sqlite3_test_control SQLITE_TESTCTRL_IMPOSTER db main 1 3
  execsql {
    CREATE TABLE imp1(a, b, id, PRIMARY KEY(b, id)) WITHOUT ROWID;
    INSERT INTO imp1 VALUES(2, 2, 2);
  }
  sqlite3_test_control SQLITE_TESTCTRL_IMPOSTER db main 0 3
} {}

db close
sqlite3 db test.db

do_test 2.2 {
  sqlite3_test_control SQLITE_TESTCTRL_IMPOSTER db main 1 4
  execsql {
    CREATE TABLE imp1(c, id, PRIMARY KEY(c, id)) WITHOUT ROWID;
    INSERT INTO imp1 VALUES(3, 3);
  }
  sqlite3_test_control SQLITE_TESTCTRL_IMPOSTER db main 0 4
} {}
db close
db_save

sqlite3 db test.db
do_catchsql_test 2.3 { PRAGMA integrity_check } {0 {{wrong # of entries in index t1c} {wrong # of entries in index sqlite_autoindex_t1_1}}}
db close

do_test 2.4 {
  sqlite3rbu rbu test.db test.db2
  while 1 {
    set rc [rbu step]
    if {$rc!="SQLITE_OK"} break
  }
  list [catch { rbu close } msg] $msg
} {1 {SQLITE_CONSTRAINT - UNIQUE constraint failed: t1.a, t1.b}}

db_restore
sqlite3 db test.db2
do_execsql_test 2.5 {
  PRAGMA writable_schema = 1;
  CREATE TABLE sqlite_rbu_replace_hack('v');
}
db close

do_test 2.6 {
  sqlite3rbu rbu test.db test.db2
  while 1 {
    set rc [rbu step]
    if {$rc!="SQLITE_OK"} break
  }
  list [catch { rbu close } msg] $msg
} {0 SQLITE_DONE}

sqlite3 db test.db
do_execsql_test 2.7 {
  PRAGMA integrity_check;
  SELECT count(*) FROM t1;
} {ok 3}



finish_test

