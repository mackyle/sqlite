# 2018 Feb 11
#
# The author disclaims copyright to this source code.  In place of
# a legal notice, here is a blessing:
#
#    May you do good and not evil.
#    May you find forgiveness for yourself and forgive others.
#    May you share freely, never taking more than you give.
#
#***********************************************************************
#
# The focus of this file is testing the zonefile extension.
#

if {![info exists testdir]} {
  set testdir [file join [file dirname [info script]] .. .. test]
}
source [file join $testdir tester.tcl]
set testprefix zonefile1
load_static_extension db zonefile

do_execsql_test 1.0 {
  CREATE TABLE zz(k INTEGER PRIMARY KEY, frame INTEGER, idx INTEGER, v BLOB);
  INSERT INTO zz VALUES(1, -1, -1, randomblob(100));
  INSERT INTO zz VALUES(2, -1, -1, randomblob(100));
  INSERT INTO zz VALUES(3, -1, -1, randomblob(100));
}

do_execsql_test 1.1 {
  SELECT zonefile_write('test.zonefile', 'zz');
} {{}}

do_execsql_test 1.2 {
  CREATE VIRTUAL TABLE z1 USING zonefile;
  SELECT name FROM sqlite_master WHERE name LIKE 'z1%' ORDER BY 1;
} {z1 z1_files z1_shadow_file z1_shadow_idx}

do_execsql_test 1.3 {
  INSERT INTO z1_files(filename) VALUES('test.zonefile');
  SELECT filename, 
         json_extract(header, '$.magicNumber'),
         json_extract(header, '$.numFrames'),
         json_extract(header, '$.numKeys')
         FROM z1_files;
} {test.zonefile 1179332920 1 3}

do_execsql_test 1.4 { SELECT count(*) FROM z1_shadow_idx } 3

do_execsql_test 1.5.1 { SELECT k FROM z1 } {1 2 3}
do_execsql_test 1.5.2 { SELECT fileid FROM z1 } {1 1 1}
do_execsql_test 1.5.4 { SELECT sz FROM z1 } {100 100 100}

do_execsql_test 1.5.5 {
  SELECT zz.v==z1.v FROM zz, z1 WHERE zz.k=z1.k
} {1 1 1}

do_execsql_test 1.5 {
  DELETE FROM z1_files;
  SELECT * FROM z1_files;
} {}

do_execsql_test 1.6 { SELECT count(*) FROM z1_shadow_idx } 0

do_execsql_test 1.7 { DROP TABLE z1 }

do_execsql_test 1.8 {
  SELECT * FROM sqlite_master WHERE name LIKE 'z1%';
}

#-------------------------------------------------------------------------
# Figure out which compression algorithms, if any, are supported by
# this build. Populate the global list $COMPRESSION_METHODS with the
# result.
reset_db
load_static_extension db zonefile
do_execsql_test 2.0 {
  CREATE TABLE bb(
    k INTEGER PRIMARY KEY, 
    frame INTEGER DEFAULT -1, 
    idx INTEGER DEFAULT -1, 
    v BLOB
  );
  INSERT INTO bb(k, v) VALUES(1, randomblob(100));
}
set COMPRESSION_METHODS [list]
foreach cmp {
  none zlib zstd zstd_global_dict lz4 lz4hc brotli nosuchcmp
} {
  set res [catchsql {
    WITH p(n,v) AS (
        VALUES('compressionTypeContent', $cmp)
    )
    SELECT zonefile_write('test.zonefile', 'bb', json_group_object(n,v)) FROM p;
  }]

  if {[lindex $res 0]==0} {
    lappend COMPRESSION_METHODS $cmp
  }
}

# Check that it is not possible to use zstd_global_dict to compress
# the zonefile index.
#
if {[lsearch $COMPRESSION_METHODS zstd_global_dict]>=0} {
  do_catchsql_test 2.1 {
    WITH p(n,v) AS (
        VALUES('compressionTypeIndexData', 'zstd_global_dict')
    )
    SELECT zonefile_write('test.zonefile', 'bb', json_group_object(n,v)) FROM p;
  } {1 {compressor "zstd_global_dict" may not be used to compress the zonefile index}}
}

set extra_header 0
set cachesize 0
foreach cmp $COMPRESSION_METHODS { foreach cmpidx $COMPRESSION_METHODS {
  if {$cmpidx == "zstd_global_dict"} continue
  reset_db
  load_static_extension db zonefile

  set tn "$cmp/$cmpidx"
  set extra_header [expr {$extra_header ? 0 : 100}]
  set cachesize [expr {$cachesize ? 0 : 10}]

  do_execsql_test 2.$tn.0.1 {
    CREATE TABLE zz(
      k INTEGER PRIMARY KEY, 
      frame INTEGER DEFAULT -1, 
      idx INTEGER DEFAULT -1, 
      v BLOB
    );
    CREATE TABLE rt(k INTEGER PRIMARY KEY, v BLOB);
  }

  do_execsql_test 2.$tn.0.2 "
    CREATE VIRTUAL TABLE zone USING zonefile(cachesize = $cachesize)
  " {}
  
  set nMinByte   0
  set nMaxByte 444
  foreach {zonefile lKey} {
    test1.zonefile {195 1238 298 405 297}
    test2.zonefile {124 1624 82 1929}
    test3.zonefile {932 683 1751 410 41}
    test4.zonefile {427 1491}
    test5.zonefile {1004 473 801 394 1672 816 1577}
    test6.zonefile {1374 1454 1005}
    test7.zonefile {450 241 319 133}
    test8.zonefile {1414 900 1406 1917 127 673}
    test9.zonefile {1192 226 988 1292 718 1345 1675}
    test10.zonefile {314}
    test11.zonefile {1177 1597 60 532 291 1164 812}
    test12.zonefile {1168 1290 1585 939 1916}
    test13.zonefile {644 1784 1476 1283 433 506}
    test14.zonefile {1141 1547 1506 364}
    test15.zonefile {1756 1885 844 1880 1896 354}
    test16.zonefile {1383 1928 1371}
    test17.zonefile {93}
    test18.zonefile {1067}
    test19.zonefile {642}
    test20.zonefile {1380 1857}
    test21.zonefile {288 293 1968 1207 1739 231 300}
    test22.zonefile {651 1007 607 830 299 1431}
    test23.zonefile {81 1651 543 1949 256 119 1088}
    test24.zonefile {1278 2024 682 1115 194 636 1804}
    test25.zonefile {514 1155 171 2015 791}
    test26.zonefile {1615 1228 147 1464}
    test27.zonefile {55 1130 781 678 78}
    test28.zonefile {1981 1401 1178}
    test29.zonefile {1754 864 183 1953 1901}
    test30.zonefile {1461 817}
    test31.zonefile {1720 1722 686 1833}
  } {
    forcedelete $zonefile
    execsql { DELETE FROM zz; }
    foreach k $lKey {
      execsql { INSERT INTO zz(k, v) VALUES($k, randomblob($k)) }
    }
    execsql { INSERT INTO rt SELECT k, v FROM zz }
    execsql { 
      WITH p(n,v) AS (
        VALUES('maxAutoFrameSize', 2000) UNION ALL
        VALUES('compressionTypeIndexData', $cmpidx) UNION ALL
        VALUES('compressionTypeContent', $cmp) UNION ALL
        VALUES('debugExtendedHeaderSize', $extra_header)
      )
      SELECT zonefile_write($zonefile, 'zz', json_group_object(n, v)) FROM p;
      INSERT INTO zone_files(filename) VALUES($zonefile);
    }
  }
  
  do_execsql_test 2.$tn.1 {
    SELECT k FROM zone JOIN rt USING (k) WHERE zone.v!=rt.v
  }
  do_execsql_test 2.$tn.2 {
    SELECT count(*) FROM zone JOIN rt USING (k);
  } {135}
  do_execsql_test 2.$tn.3 {
    SELECT filename, 
           json_extract(header, '$.numKeys'),
           json_extract(header, '$.numFrames')
    FROM zone_files 
    WHERE filename IN ('test19.zonefile', 'test20.zonefile', 'test21.zonefile')
    ORDER BY 1
  } {
    test19.zonefile 1 1
    test20.zonefile 2 2
    test21.zonefile 7 4
  }
}}

#--------------------------------------------------------------------------
#
reset_db
load_static_extension db zonefile
do_execsql_test 3.0 {
  CREATE TABLE dd(k INTEGER PRIMARY KEY, frame INTEGER, idx INTEGER, v BLOB);
  INSERT INTO dd VALUES(1000, 1, -1, randomblob(44));
  INSERT INTO dd VALUES(1001, 1, -1, randomblob(55));
  INSERT INTO dd VALUES(1002, 2, -1, randomblob(66));
  WITH p(n,v) AS (
      VALUES('maxAutoFrameSize', 2000) UNION ALL
      VALUES('encryptionType', 'xor') UNION ALL
      VALUES('debugEncryptionKeyText', 1) UNION ALL
      VALUES('encryptionKey', '0123456789')
  )
  SELECT zonefile_write('test.zonefile', 'dd', json_group_object(n, v)) FROM p;
} {{}}

do_execsql_test 3.1 {
  CREATE VIRTUAL TABLE cc USING zonefile;
  INSERT INTO cc_files(filename,ekey) VALUES('test.zonefile','0123456789');
  SELECT quote(dd.v)==quote(cc.v) FROM cc JOIN dd USING (k)
} {1 1 1}

do_execsql_test 3.2.1 {
  DELETE FROM cc_files;
  INSERT INTO cc_files(filename,ekey) VALUES('test.zonefile','abcdefghij');
  SELECT quote(dd.v)==quote(cc.v) FROM cc JOIN dd USING (k)
} {0 0 0}

do_execsql_test 3.2.2 {
  SELECT rowid,sz FROM cc;
} {1000 44 1001 55 1002 66}

do_execsql_test 3.3 {
  UPDATE cc_files SET ekey = '0123456789';
  SELECT quote(dd.v)==quote(cc.v) FROM cc JOIN dd USING (k)
} {1 1 1}

close [open test.zonefile w+]
do_catchsql_test 3.4 {
  SELECT header FROM cc_files
} {1 {failed to read header from file: "test.zonefile"}}

forcedelete test.zonefile
do_catchsql_test 3.5 {
  SELECT header FROM cc_files
} {1 {failed to open file "test.zonefile" for reading}}

do_execsql_test 3.6 {
  SELECT ekey FROM cc_files
} {{}}

forcedelete test.zonefile
do_catchsql_test 3.7 {
  SELECT * FROM cc;
} {1 {failed to open file "test.zonefile" for reading}}

#-------------------------------------------------------------------------
# Check that a file that uses an unknown compression method is handled
# correctly (an error is returned).
#
reset_db
load_static_extension db zonefile
do_execsql_test 4.0 {
  CREATE TABLE dd(k INTEGER PRIMARY KEY, frame INTEGER, idx INTEGER, v BLOB);
  INSERT INTO dd VALUES(1000, 1, -1, randomblob(44));
  INSERT INTO dd VALUES(1001, 1, -1, randomblob(55));
  INSERT INTO dd VALUES(1002, 2, -1, randomblob(66));
  SELECT zonefile_write('test.zonefile', 'dd');
  CREATE VIRTUAL TABLE x1 USING zonefile;
} {{}}

do_test 4.1 {
  hexio_write test.zonefile 5 77
} {1}
do_execsql_test 4.2 {
  INSERT INTO x1_files(filename) VALUES('test.zonefile');
} {}
do_catchsql_test 4.3 {
  SELECT * FROM x1
} {1 {unsupported compression method: 119}}
do_test 4.4 {
  hexio_write test.zonefile 4 77
} {1}
do_catchsql_test 4.5 {
  DELETE FROM x1_files;
  INSERT INTO x1_files(filename) VALUES('test.zonefile');
} {1 {unsupported compression method: 119}}

do_test 4.6 {
  hexio_write test.zonefile 0 00
} {1}
do_catchsql_test 4.7 {
  INSERT INTO x1_files(filename) VALUES('test.zonefile');
} {1 {failed to read zonefile header from file "test.zonefile"}}

#-------------------------------------------------------------------------
# Test using various types in the "frame" field of an input table.
#
reset_db
load_static_extension db zonefile
if {[lsearch $COMPRESSION_METHODS zlib]>=0} {
  do_execsql_test 5.0 {
    CREATE TABLE "a b"(k INTEGER PRIMARY KEY,frame INTEGER,idx INTEGER,v BLOB);
    INSERT INTO "a b" VALUES(1, 0.5, -1, randomblob(44));
    INSERT INTO "a b" VALUES(2, 0.5, -1, randomblob(55));
    INSERT INTO "a b" VALUES(3, 1.5, -1, randomblob(55));
    INSERT INTO "a b" VALUES(4, 1.5, -1, randomblob(55));
    INSERT INTO "a b" VALUES(5,   2, -1, randomblob(55));
    INSERT INTO "a b" VALUES(6,   2, -1, randomblob(55));
    INSERT INTO "a b" VALUES(7, 200, -1, randomblob(55));
    INSERT INTO "a b" VALUES(8, 200, -1, randomblob(55));
    INSERT INTO "a b" VALUES(9, 300, -1, randomblob(55));
    INSERT INTO "a b" VALUES(10, 300, -1, randomblob(55));
    INSERT INTO "a b" VALUES(11, NULL, -1, randomblob(55));
    INSERT INTO "a b" VALUES(12, NULL, -1, randomblob(55));
    INSERT INTO "a b" VALUES(13, 'f1', -1, randomblob(55));
    INSERT INTO "a b" VALUES(14, 'f1', -1, randomblob(55));
    INSERT INTO "a b" VALUES(15, 'frame2', -1, randomblob(55));
    INSERT INTO "a b" VALUES(16, 'frame2', -1, randomblob(55));
    INSERT INTO "a b" VALUES(17, x'1234', -1, randomblob(55));
    INSERT INTO "a b" VALUES(18, x'1234', -1, randomblob(55));
    INSERT INTO "a b" VALUES(19, x'abcd', -1, randomblob(55));
    INSERT INTO "a b" VALUES(20, x'abcd', -1, randomblob(55));
  
    SELECT zonefile_write('test.zonefile', 'a b',
      '{"compressionTypeContent":"zlib"}'
    );
  } {{}}

  do_execsql_test 5.1 {
    CREATE VIRTUAL TABLE abc USING zonefile; 
    INSERT INTO abc_files(filename) VALUES('test.zonefile');
    SELECT group_concat(k) FROM abc_shadow_idx GROUP BY fofst
  } {
    11,12   1,2   3,4   5,6   7,8  
     9,10  13,14 15,16 17,18 19,20
  }
}

do_execsql_test 6.0 {
  CREATE TABLE "ab"(k INTEGER PRIMARY KEY,frame INTEGER,idx INTEGER,v BLOB);
  INSERT INTO "ab" VALUES(1, 0.5, -1, randomblob(44));
  INSERT INTO "ab" VALUES(2, 0.5, -1, randomblob(55));
  INSERT INTO "ab" VALUES(3, 1.5, -1, randomblob(55));
  INSERT INTO "ab" VALUES(4, 1.5, -1, randomblob(55));
}
do_catchsql_test 6.1.1 {
  SELECT zonefile_write('test.zonefile', 'ab',
      '{"debugExtendedHeaderSize":-1}'
  );
} {1 {debugExtendedHeaderSize value out of range: -1}}
do_catchsql_test 6.1.2 {
  SELECT zonefile_write('test.zonefile', 'ab',
      '{"debugExtendedHeaderSize":256}'
  );
} {1 {debugExtendedHeaderSize value out of range: 256}}

do_catchsql_test 6.2 {
  SELECT zonefile_write('test.zonefile', 'ab',
      '{"unknown":256}'
  );
} {1 {unknown parameter name: "unknown"}}

forcedelete test.dir
file mkdir test.dir
do_catchsql_test 6.3 {
  SELECT zonefile_write('test.dir', 'ab');
} {1 {failed to open file "test.dir" for writing}}

do_catchsql_test 6.4 {
  CREATE VIRTUAL TABLE zzz USING zonefile;
  INSERT INTO zzz_files(filename) VALUES('nosuchfile.zonefile');
} {1 {failed to open file "nosuchfile.zonefile" for reading}}

if {$tcl_platform(platform)=="windows"} {
  do_catchsql_test 6.5 {
    INSERT INTO zzz_files(filename) VALUES('test.dir');
  } {1 {failed to open file "test.dir" for reading}}
} else {
  do_catchsql_test 6.5 {
    INSERT INTO zzz_files(filename) VALUES('test.dir');
  } {1 {failed to read zonefile header from file "test.dir"}}
}

#-------------------------------------------------------------------------
# Check that errors generated when building a dictionary are handled.
# The zstd library routines for building a dictionary throw an error
# if they are provided with too little data.
#
# Also test that zstd_global_dict cannot be used to compress the zonefile
# index (as there is nowhere in the file format to store the dictionary
# for this compression).
#
reset_db
load_static_extension db zonefile
if {[lsearch $COMPRESSION_METHODS zstd_global_dict]>=0} {
  do_execsql_test 7.0 {
    CREATE TABLE "ab"(k INTEGER PRIMARY KEY,frame INTEGER,idx INTEGER,v BLOB);
    INSERT INTO "ab" VALUES(1, -1, -1, 'abc');
  }

  do_catchsql_test 7.1 {
    SELECT zonefile_write('test.zonefile', 'ab',
      '{"compressionTypeContent":"zstd_global_dict"}'
    );
  } {1 {error generating dictionary}}

  do_catchsql_test 7.2 {
    SELECT zonefile_write('test.zonefile', 'ab',
      '{"compressionTypeIndexData":"zstd_global_dict"}'
    );
  } {1 {compressor "zstd_global_dict" may not be used to compress the zonefile index}}
}

#-------------------------------------------------------------------------
#
reset_db
load_static_extension db zonefile
do_catchsql_test 8.1 {
  CREATE VIRTUAL TABLE one USING zonefile_files;
} {1 {do not create zonefile_files tables directly!}}
do_catchsql_test 8.2 {
  CREATE VIRTUAL TABLE onetwothree USING zonefile_files;
} {1 {do not create zonefile_files tables directly!}}

#-------------------------------------------------------------------------
# A zone file containing zero keys.
#
reset_db
load_static_extension db zonefile
do_execsql_test 9.0 {
  CREATE TABLE s(k INTEGER PRIMARY KEY,frame INTEGER,idx INTEGER,v BLOB);
  SELECT zonefile_write('test.zonefile', 's');
} {{}}
do_execsql_test 9.1 {
  CREATE VIRTUAL TABLE ss USING zonefile;
  INSERT INTO ss_files(filename) VALUES('test.zonefile');
  SELECT * FROM ss;
} {}

#-------------------------------------------------------------------------
# Test UPDATE and DELETE statements on the %_files virtual table.
#
reset_db
load_static_extension db zonefile
do_execsql_test 10.0 {
  CREATE TABLE data(k INTEGER PRIMARY KEY, v BLOB);
  INSERT INTO data(k, v) VALUES(1, randomblob(100));
  INSERT INTO data(k, v) VALUES(2, randomblob(100));
  INSERT INTO data(k, v) VALUES(3, randomblob(100));
  INSERT INTO data(k, v) VALUES(4, randomblob(100));
  INSERT INTO data(k, v) VALUES(5, randomblob(100));
  INSERT INTO data(k, v) VALUES(6, randomblob(100));
  INSERT INTO data(k, v) VALUES(7, randomblob(100));
  INSERT INTO data(k, v) VALUES(8, randomblob(100));
  INSERT INTO data(k, v) VALUES(9, randomblob(100));

  CREATE VIEW v1 AS 
    SELECT k, -1 AS frame, -1 AS idx, v
    FROM data WHERE k IN (1,2,3);
  SELECT zonefile_write('test1.zonefile', 'v1');

  CREATE VIEW v2 AS 
    SELECT k, -1 AS frame, -1 AS idx, v
    FROM data WHERE k IN (4,5,6);
  SELECT zonefile_write('test2.zonefile', 'v2');

  CREATE VIEW v3 AS 
    SELECT k, -1 AS frame, -1 AS idx, v
    FROM data WHERE k IN (7,8,9);
  SELECT zonefile_write('test3.zonefile', 'v3');
} {{} {} {}}

do_execsql_test 10.1 {
  CREATE VIRTUAL TABLE "a b" USING zonefile;
  INSERT INTO "a b_files"(filename) VALUES('test1.zonefile');
  SELECT k FROM "a b"
} {1 2 3}

do_execsql_test 10.2 {
  UPDATE "a b_files" SET filename = 'test2.zonefile';
  SELECT k FROM "a b"
} {4 5 6}

do_execsql_test 10.3 {
  INSERT INTO "a b_files"(filename) VALUES('test1.zonefile');
  INSERT INTO "a b_files"(filename) VALUES('test3.zonefile');
  SELECT k FROM "a b"
} {1 2 3 4 5 6 7 8 9}

do_execsql_test 10.4 {
  DELETE FROM "a b_files" WHERE filename = 'test2.zonefile';
  SELECT k FROM "a b"
} {1 2 3 7 8 9}

do_execsql_test 10.5 {
  DELETE FROM "a b_files" WHERE filename = 'test1.zonefile';
  SELECT k FROM "a b"
} {7 8 9}

#-------------------------------------------------------------------------
#
reset_db
load_static_extension db zonefile
do_execsql_test 11.0 {
  CREATE TABLE data(k INTEGER PRIMARY KEY, v BLOB);
  INSERT INTO data(k, v) VALUES(-1, randomblob(100));
  INSERT INTO data(k, v) VALUES(1000, randomblob(100));
  INSERT INTO data(k, v) VALUES(-1000, randomblob(100));
  INSERT INTO data(k, v) VALUES(9223372036854775807, randomblob(100));
  INSERT INTO data(k, v) VALUES(-9223372036854775807, randomblob(100));
  INSERT INTO data(k, v) VALUES(-9223372036854775808, randomblob(100));

  CREATE VIEW v1 AS SELECT k, -1 AS frame, -1 AS idx, v FROM data;
  SELECT zonefile_write('test1.zonefile', 'v1');
} {{}}

do_execsql_test 11.1 {
  CREATE VIRTUAL TABLE one USING zonefile;
  INSERT INTO "one_files"(filename) VALUES('test1.zonefile');
  SELECT k FROM one
} {-9223372036854775808 -9223372036854775807 -1000 -1 1000 9223372036854775807}

do_execsql_test 11.2 {
  SELECT count(*) FROM data JOIN one USING (k) WHERE one.v==data.v
} 6

#-------------------------------------------------------------------------
#
do_catchsql_test 12.1 {
  CREATE VIRTUAL TABLE nm USING zonefile(abcd)
} {1 {parse error in option: abcd}}
do_catchsql_test 12.2 {
  CREATE VIRTUAL TABLE nm USING zonefile(a=b)
} {1 {parse error in option: a=b}}
do_catchsql_test 12.3 {
  CREATE VIRTUAL TABLE nm USING zonefile(cachesiza=b)
} {1 {parse error in option: cachesiza=b}}

#-------------------------------------------------------------------------
#
reset_db
load_static_extension db zonefile
do_execsql_test 13.0 {
  CREATE TABLE data(k INTEGER PRIMARY KEY, v BLOB);
  WITH s(i) AS (
    SELECT 1 UNION ALL SELECT i+1 FROM s WHERE i<250
  )
  INSERT INTO data SELECT i, randomblob(100) FROM s;
  CREATE VIEW v1 AS SELECT k, -1 AS frame, -1 AS idx, v FROM data;
  SELECT zonefile_write('test1.zonefile', 'v1');

  CREATE VIRTUAL TABLE nm USING zonefile;
  INSERT INTO nm_files(filename) VALUES('test1.zonefile');
} {{}}

foreach {tn cond} {
  1   "k > 30"
  2   "k >= 100"
  3   "k <= 100"
  4   "k < 55"
  5   "k LIKE '1%'"
  6   "k BETWEEN 10 AND 20"
  7   "k > 100 AND k < 200"
} {
  do_execsql_test 13.1.$tn.1 [subst {
    SELECT count(*) FROM nm WHERE $cond
  }] [db one "SELECT count(*) FROM data WHERE $cond"]

  do_execsql_test 13.1.$tn.2 [subst {
    SELECT count(*) FROM nm WHERE $cond AND
      v!=(SELECT v FROM data WHERE k=nm.k);
  }] 0
}

close [open test1.zonefile w+]
do_catchsql_test 13.2.1 {
  SELECT * FROM nm WHERE k=24;
} {1 {SQL logic error}}
forcedelete test1.zonefile
do_catchsql_test 13.2.2 {
  SELECT * FROM nm WHERE k=24;
} {1 {failed to open file "test1.zonefile" for reading}}

do_catchsql_test 13.3.1 {
  DELETE FROM nm_shadow_file;
  SELECT * FROM nm WHERE k=24;
} {1 {database disk image is malformed}}
do_catchsql_test 13.3.2 {
  DROP TABLE nm_shadow_file;
  SELECT * FROM nm WHERE k=24;
} {1 {no such table: main.nm_shadow_file}}
db close
sqlite3 db test.db
load_static_extension db zonefile
do_catchsql_test 13.3.3 {
  SELECT * FROM nm WHERE k=24;
} {1 {no such table: main.nm_shadow_file}}

#-------------------------------------------------------------------------
#
reset_db
load_static_extension db zonefile
do_execsql_test 14.0 {
  CREATE TABLE data(k INTEGER PRIMARY KEY, frame, idx, v BLOB);
  INSERT INTO data VALUES(1, 1, -1, randomblob(200));
  INSERT INTO data VALUES(2, 2, -1, randomblob(200));
  INSERT INTO data VALUES(3, 3, -1, randomblob(200));
  SELECT zonefile_write('test.zonefile', 'data',
  '{"encryptionType":"xor","encryptionKey":"pass","debugEncryptionKeyText":1}'
  );

  CREATE VIRTUAL TABLE nm USING zonefile(cachesize=2);
  INSERT INTO nm_files(filename,ekey) VALUES('test.zonefile','pass');
} {{}}

set i 0
foreach id {1 2 3 2 3 1} {
  do_execsql_test 14.1.$i {
    SELECT data.v=nm.v FROM data,nm WHERE data.k=$id AND nm.k=$id
  } 1
  incr i
}

if {[file exists /dev/null]} {
  do_catchsql_test 14.2 {
    INSERT INTO nm_files(filename) VALUES('/dev/null');
  } {1 {failed to read zonefile header from file "/dev/null"}}
}

finish_test

