# 2020 Jan 20
#
# The author disclaims copyright to this source code.  In place of
# a legal notice, here is a blessing:
#
#    May you do good and not evil.
#    May you find forgiveness for yourself and forgive others.
#    May you share freely, never taking more than you give.
#
#***********************************************************************
#

set testdir [file dirname $argv0]
source $testdir/tester.tcl
source $testdir/lock_common.tcl
set ::testprefix concreport

ifcapable !concurrent||!preupdate {
  finish_test
  return
}
proc filtered_report {db {writes 0}} {
  set report [split [sqlite3_begin_concurrent_report $db] "\n"]
  set report [lrange $report 0 end-1]
  set res [list]
  foreach r $report {
    set c [string range $r 0 0]
    if {$writes==0 && ($c=="R" || $c=="W" || $c=="F")} continue
    if {$writes==1 && $c!="R" && $c!="W" && $c!="F"} continue
    lappend res $r
  }
  set res
}

proc do_concreport_test {tn sql res report} {
  uplevel [list do_execsql_test $tn.1 "
    BEGIN CONCURRENT;
      $sql ;
    COMMIT;
  " $res]

  uplevel [list do_test $tn.2 {
    filtered_report db 0
  } [list {*}$report]]
}

proc do_pagereport_test {tn sql res report} {
  uplevel [list do_catchsql_test $tn.1 "
    BEGIN CONCURRENT;
      $sql ;
    COMMIT;
  " $res]

  uplevel [list do_test $tn.2 {
    filtered_report db 1
  } [list {*}$report]]
}

sqlite3_begin_concurrent_report_enable db 1

do_execsql_test 1.0 {
  PRAGMA journal_mode = wal;
} {wal}

do_execsql_test 1.1 {
  CREATE TABLE t1(k INTEGER PRIMARY KEY, v);
  WITH s(i) AS (
    SELECT 1 UNION ALL SELECT i+1 FROM s WHERE i<100
  )
  INSERT INTO t1 SELECT i, i FROM s;

  BEGIN CONCURRENT;
    SELECT * FROM t1 WHERE k = 5;
    SELECT * FROM t1 WHERE k = 10;
  COMMIT;
} {5 5 10 10}
do_test 1.1.1 {
  list {*}[sqlite3_begin_concurrent_report db]
} [list {2:[10..10]} {2:[5..5]}]

do_concreport_test 1.2 {
  SELECT * FROM t1 WHERE k = 100;
} {100 100} {
  2:[100..100]
}

do_concreport_test 1.3 {
  SELECT * FROM t1 WHERE k >= 10 AND k <= 13;
} {10 10 11 11 12 12 13 13} {
  2:[10..13]
}

do_concreport_test 1.4 {
  SELECT max(k) FROM t1;
} {100} {
  2:[100..EOF)
}
do_concreport_test 1.5 {
  SELECT min(k) FROM t1;
} {1} {
  2:(EOF..1]
}

do_concreport_test 1.6 {
  SELECT * FROM t1 WHERE k IN (4, 6, 8)
} {4 4 6 6 8 8} {
  2:[8..8]
  2:[6..6]
  2:[4..4]
}

do_concreport_test 1.7 {
  SELECT v FROM t1 WHERE k > 22 LIMIT 5
} {23 24 25 26 27} {
  2:(22..27]
}

do_concreport_test 1.8 {
  SELECT v FROM t1 WHERE k > 22 ORDER BY k DESC LIMIT 5
} {100 99 98 97 96} {
  2:[96..EOF)
}

do_concreport_test 1.9 {
  SELECT v FROM t1 WHERE k > 21 AND k < 25
} {22 23 24} {
  2:(21..25)
}
do_concreport_test 1.10 {
  SELECT v FROM t1 WHERE k > 21 AND k < 25 ORDER BY k DESC
} {24 23 22} {
  2:(21..25)
}

do_concreport_test 1.11 {
  SELECT v FROM t1 WHERE k > 98 AND k < 200
} {99 100} {
  2:(98..200)
}

do_concreport_test 1.12 {
  SELECT v FROM t1 WHERE k >= 98 AND k <= 200
} {98 99 100} {
  2:[98..200]
}

# BUG: This case does not work. The result should be [101..200], but as 
# there are no rows matching (k>=101) the system never sees the (k<=200)
# constraint. Hence "..EOF".
do_concreport_test 1.13 {
  SELECT v FROM t1 WHERE k >= 101 AND k <= 200
} {} {
  2:[101..EOF)
}

do_concreport_test 1.14 {
  SELECT v FROM t1 WHERE +v=5
} {5} {
  2:(EOF..EOF)
}

#--------------------------------------------------------------------------
reset_db
sqlite3_begin_concurrent_report_enable db 1
do_execsql_test 2.0 {
  PRAGMA journal_mode = wal;
  CREATE TABLE t2(k PRIMARY KEY, v);
  INSERT INTO t2 VALUES('a',  1);
  INSERT INTO t2 VALUES('b',  2);
  INSERT INTO t2 VALUES('c',  3);
  INSERT INTO t2 VALUES('d',  4);
  INSERT INTO t2 VALUES('e',  5);
  INSERT INTO t2 VALUES('f',  6);
  INSERT INTO t2 VALUES('g',  7);
  INSERT INTO t2 VALUES('i',  9);
  INSERT INTO t2 VALUES('j', 10);
  INSERT INTO t2 VALUES('k', 11);
} {wal}

do_concreport_test 2.1 {
  SELECT * FROM t2 WHERE k = 'e'
} {e 5} {
  3:[{'e'}..{'e'}]
}

do_concreport_test 2.2 {
  SELECT * FROM t2 WHERE k = 'h'
} {} {
  3:[{'h'}..{'h'}]
}

do_concreport_test 2.3 {
  SELECT * FROM t2 WHERE k >= 'c' AND k <= 'f';
} {c 3 d 4 e 5 f 6} {
  3:[{'c'}..{'f'}]
}

do_concreport_test 2.4 {
  SELECT max(k) FROM t2;
} {k} {
  3:[{'k',10}..EOF)
}
do_concreport_test 2.5 {
  SELECT min(k) FROM t2;
} {a} {
  3:({NULL}..{'a',1}]
}

do_concreport_test 2.6 {
  SELECT * FROM t2 WHERE k IN ('c', 'e', 'g')
} {c 3 e 5 g 7} {
  3:[{'g'}..{'g'}]
  3:[{'e'}..{'e'}]
  3:[{'c'}..{'c'}]
}

do_concreport_test 2.7 {
  SELECT v FROM t2 WHERE k > 'b' LIMIT 5
} {3 4 5 6 7} {
  3:({'b'}..{'g',7}]
}

do_concreport_test 2.8 {
  SELECT v FROM t2 WHERE k > 'b' ORDER BY k DESC LIMIT 5
} {11 10 9 7 6} {
  3:[{'f',6}..EOF)
}

do_concreport_test 2.9 {
  SELECT v FROM t2 WHERE k > 'b' AND k < 'f'
} {3 4 5} {
  3:({'b'}..{'f'})
}
do_concreport_test 2.10 {
  SELECT v FROM t2 WHERE k > 'b' AND k < 'f' ORDER BY k DESC
} {5 4 3} {
  3:({'b'}..{'f'})
}

do_concreport_test 2.11 {
  SELECT v FROM t2 WHERE k > 'j' AND k < 'q'
} {11} {
  3:({'j'}..{'q'})
}

do_concreport_test 2.12 {
  SELECT v FROM t2 WHERE k >= 'j' AND k <= 'q'
} {10 11} {
  3:[{'j'}..{'q'}]
}

do_concreport_test 2.13 {
  SELECT v FROM t2 WHERE k > 'j' AND k < 'q' ORDER BY k DESC
} {11} {
  3:({'j'}..{'q'})
}

do_concreport_test 2.14 {
  SELECT v FROM t2 WHERE k >= 'j' AND k <= 'q' ORDER BY k DESC
} {11 10} {
  3:[{'j'}..{'q'}]
}

# BUG: This case does not work. The result should be [101..200], but as there
# are no rows matching (k>=101) the system never sees the (k<=200) constraint.
# Hence "..EOF".
do_concreport_test 2.15 {
  SELECT v FROM t2 WHERE k >= 'q' AND k <= 's'
} {} {
  3:[{'q'}..EOF)
}

do_concreport_test 2.16 {
  SELECT v FROM t2 WHERE +v=5 ORDER BY k
} {5} {
  3:(EOF..EOF)
}

#--------------------------------------------------------------------------
reset_db
sqlite3_begin_concurrent_report_enable db 1
do_execsql_test 3.1 {
  PRAGMA journal_mode = wal;
  CREATE TABLE t1(a, b, c, PRIMARY KEY(a, b)) WITHOUT ROWID;
  CREATE INDEX t1c ON t1(c);
  INSERT INTO t1 VALUES(1, 1, 'one');
  INSERT INTO t1 VALUES(1, 2, 'one.two');
  INSERT INTO t1 VALUES(2, 1, 'two');
  INSERT INTO t1 VALUES(2, 2, 'two.two');
  INSERT INTO t1 VALUES(3, 1, 'three');
  INSERT INTO t1 VALUES(3, 2, 'three.two');
  INSERT INTO t1 VALUES(4, 1, 'four');
  INSERT INTO t1 VALUES(4, 2, 'four.two');
} {wal}

do_concreport_test 3.1 {
  SELECT c FROM t1 WHERE a=1;
} {one one.two} {
  2:[{1}..{1}]
}

do_concreport_test 3.2 {
  SELECT c FROM t1 WHERE (a, b) = (1, 2);
} {one.two} {
  2:[{1,2}..{1,2}]
}

do_concreport_test 3.3 {
  SELECT c FROM t1 WHERE (a, b) >= (3, 2);
} {three.two four four.two} {
  2:[{3,2}..EOF)
}

# BUG: This is reported as if the query included rows with PK (3,2), even
# though it does not (i.e. result should be "2:({3,2}..EOF)").
do_concreport_test 3.4 {
  SELECT c FROM t1 WHERE (a, b) > (3, 2);
} {four four.two} {
  2:[{3,2}..EOF)
}

do_concreport_test 3.5 {
  SELECT c FROM t1 WHERE a > 3;
} {four four.two} {
  2:({3}..EOF)
}

do_concreport_test 3.6 {
  SELECT c FROM t1 WHERE a>1 AND a<4;
} {two two.two three three.two} {
  2:({1}..{4})
}

do_concreport_test 3.7 {
  SELECT c FROM t1 WHERE a>=2 AND a<=3;
} {two two.two three three.two} {
  2:[{2}..{3}]
}

do_concreport_test 3.8 {
  SELECT a FROM t1 WHERE c IN('two', 'three', 'four');
} {4 3 2} {
  3:[{'two'}..{'two'}]
  3:[{'three'}..{'three'}]
  3:[{'four'}..{'four'}]
}

do_concreport_test 3.9 {
  SELECT a FROM t1 ORDER BY c;
} {4 4 1 1 3 3 2 2} {
  3:(EOF..EOF)
}

#--------------------------------------------------------------------------
reset_db
sqlite3_begin_concurrent_report_enable db 1
do_execsql_test 4.0 {
  PRAGMA journal_mode = wal;
  CREATE TABLE yy(a INTEGER PRIMARY KEY, one, two);
  CREATE INDEX yytwo ON yy(two);

  CREATE TABLE xx(c INTEGER PRIMARY KEY, three, four);
  CREATE INDEX xxthree ON xx(three);

  INSERT INTO yy VALUES(1, 1, 1), (2, 2, 2), (3, 3, 3), (4, 4, 4);
  INSERT INTO xx VALUES(1, 1, 1), (2, 2, 2), (3, 3, 3), (4, 4, 4);
} {wal}

do_concreport_test 4.1 {
  SELECT count(one) FROM xx,yy
} {16} {
  5:(EOF..EOF)
  5:(EOF..EOF)
  5:(EOF..EOF)
  5:(EOF..EOF)
  2:(EOF..EOF)
}

do_concreport_test 4.2 {
  SELECT count(one) FROM xx, yy WHERE two=three;
} {4} {
  5:[{4}..{4}]
  5:[{3}..{3}]
  5:[{2}..{2}]
  5:[{1}..{1}]
  2:(EOF..EOF)
}


#--------------------------------------------------------------------------
reset_db
sqlite3_begin_concurrent_report_enable db 1
do_execsql_test 5.0 {
  PRAGMA journal_mode = wal;
  CREATE TABLE t1(a INTEGER PRIMARY KEY, b, c);
  CREATE TABLE t2(a PRIMARY KEY, b, c) WITHOUT ROWID;
} {wal}

do_concreport_test 5.1.1 {
  INSERT INTO t1 VALUES(1, 2, 3);
} {} {
  2<-(1){NULL,2,3}
  2:[1..1]
}

do_concreport_test 5.1.2 {
  UPDATE t1 SET c='three' WHERE rowid=1;
} {} {
  2<-(1){NULL,2,'three'}
  2<-(1){NULL,2,3}
  2:[1..1]
}

do_concreport_test 5.1.3 {
  DELETE FROM t1 WHERE rowid=1
} {} {
  2<-(1){NULL,2,'three'}
  2:[1..1]
}

do_concreport_test 5.2.1 {
  INSERT INTO t2 VALUES(1, 2, 3);
} {} {
  3<-(0){1,2,3}
}
do_concreport_test 5.2.2 {
  UPDATE t2 SET c='three' WHERE a=1;
} {} {
  3<-(0){1,2,'three'}
  3<-(0){1,2,3}
  3:[{1}..{1}]
}
do_concreport_test 5.2.3 {
  DELETE FROM t2 WHERE a=1
} {} {
  3<-(0){1,2,'three'}
  3:[{1}..{1}]
}

do_concreport_test 5.3 {
  INSERT INTO t2 VALUES(44, x'abcdef', x'001100');
} {} {
  3<-(0){44,X'ABCDEF',X'001100'}
}

#--------------------------------------------------------------------------
reset_db
sqlite3_begin_concurrent_report_enable db 1
do_execsql_test 6.0 {
  PRAGMA journal_mode = wal;
  CREATE TABLE t1(a INTEGER PRIMARY KEY, b, c);
  CREATE TABLE t2(a PRIMARY KEY, b, c) WITHOUT ROWID;
} {wal}

do_pagereport_test 6.1 {
  INSERT INTO t1 VALUES(1, 2, 3);
} {0 {}} {
  W:{2} R:{2}
}

do_pagereport_test 6.2 {
  INSERT INTO t2 VALUES(1, 2, 3);
} {0 {}} {
  W:{3} R:{3}
}

do_pagereport_test 6.3 {
  SELECT * FROM t1;
  INSERT INTO t2 VALUES(4, 5, 6);
} {0 {1 2 3}} {
  W:{3} {R:{2 3}}
}

sqlite3 db2 test.db
proc write_t2 {a b c} {
  db2 eval {INSERT INTO t2 VALUES($a, $b, $c)}
}
db func write_t2 write_t2

do_pagereport_test 6.3 {
  SELECT * FROM t1;
  INSERT INTO t2 VALUES(7, 8, 9);
  SELECT write_t2(7, 8, 9);
} {1 {database is locked}} {
  {F:{2 3}}
}

finish_test
